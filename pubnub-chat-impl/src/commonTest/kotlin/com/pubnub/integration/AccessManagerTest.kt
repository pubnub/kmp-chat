package com.pubnub.integration

import com.pubnub.api.PubNubException
import com.pubnub.api.models.consumer.access_manager.v3.ChannelGrant
import com.pubnub.api.models.consumer.access_manager.v3.UUIDGrant
import com.pubnub.chat.Event
import com.pubnub.chat.internal.message.MessageImpl
import com.pubnub.chat.listenForEvents
import com.pubnub.chat.types.EventContent
import com.pubnub.internal.PLATFORM
import com.pubnub.test.await
import kotlinx.coroutines.test.runTest
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith

class AccessManagerTest : BaseChatIntegrationTest() {
    @Test
    fun pubNubClient_with_PAM_enabled_should_not_getChannel_when_no_token_set() = runTest {
        val channelId = channelPam.id
        val expectedStatusCode = 403 // Forbidden, no valid security Token provided

        val exception = assertFailsWith<PubNubException> { chatPamClient.getChannel(channelId).await() }
        assertEquals(expectedStatusCode, exception.statusCode)
    }

    @Test
    fun pubNubClient_with_PAM_enabled_should_getChannel_when_token_set() = runTest {
        if (PLATFORM == "iOS") {
            return@runTest
        }
        // getToken from server
        val channelId = channelPam.id
        chatPamServer.createChannel(id = channelId).await()
        val token = chatPamServer.pubNub.grantToken(
            ttl = 1,
            channels = listOf(ChannelGrant.name(get = true, name = channelId, read = true, write = true, manage = true)) // get = true
        ).await().token
        // client uses token generated by server
        chatPamClient.pubNub.setToken(token)

        val token1 = chatPamClient.pubNub.getToken()
        assertEquals(token1, token)
        val actualChannelId = chatPamClient.getChannel(channelId).await()?.id
        assertEquals(channelId, actualChannelId)

        chatPamServer.deleteChannel(id = channelId).await()
    }

    @Test
    fun setLastReadMessageTimetoken_should_send_Receipt_event_when_has_token() = runTest {
        if (PLATFORM == "iOS") {
            return@runTest
        }
        var numberOfReceiptEvents = 0
        val timetoken = 1000L
        val channelId = channelPam.id

        // server generates token
        val token = chatPamServer.pubNub.grantToken(
            ttl = 1,
            authorizedUUID = chatPamClient.currentUser.id,
            channels = listOf(
                ChannelGrant.name(
                    name = channelId,
                    read = true,
                    write = true,
                    get = true,
                    join = true,
                    update = true,
                    manage = true,
                    delete = true,
                    create = true
                )
            ),
            uuids = listOf(UUIDGrant.id(id = chatPamClient.currentUser.id, get = true, update = true, delete = true))
        ).await().token

        // client uses token retrieved from server
        chatPamClient.pubNub.setToken(token)

        chatPamClient.listenForEvents(channelId) { event: Event<EventContent.Receipt> ->
            numberOfReceiptEvents++
        }

        val channel = chatPamClient.createChannel(channelId).await()
        delayInMillis(1000)
        val membership1 = channel.join().await().membership
        membership1.setLastReadMessage(
            MessageImpl(
                chatPamClient,
                timetoken,
                EventContent.TextMessageContent("abc"),
                channelId = channel.id,
                userId = someUser.id
            )
        ).await()
        delayInMillis(1000)
        assertEquals(2, numberOfReceiptEvents) // join and setLastReadMessage sets LastReadMessageTimetoken

        chatPamServer.deleteChannel(channelId).await()
    }
}
